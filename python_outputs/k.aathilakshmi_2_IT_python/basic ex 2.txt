 print("Module 2:advanced data structures & control flow")
Module 2:advanced data structures & control flow
>>> print("="*60)
============================================================
>>> print("I'm python.Nice to meet you!")
I'm python.Nice to meet you!
>>> print("Hello,world",end="!")
>>> print("Hello,world",end="!")
>>> o,world!
>>> input_string_var=input("Enter some data:")
Enter some data:hi
>>> some_var = 5
>>> some_var
5
>>> some_unknown_var
Traceback (most recent call last):
  File "<python-input-9>", line 1, in <module>
    some_unknown_var
NameError: name 'some_unknown_var' is not defined
>>> "yay!" if 0 > 1 else "nay!"
'nay!'
>>> li = []
>>> other_li = [4, 5, 6]
>>> li.append(1)
>>> li.append(2)
>>> li.append(4)
>>> li.append(3)
>>> li.pop()
3
>>> li.append(3)
>>> li{0}
  File "<python-input-19>", line 1
    li{0}
      ^
SyntaxError: invalid syntax
>>> li[0]
1
>>> li[-1]
3
>>> li[4]
Traceback (most recent call last):
  File "<python-input-22>", line 1, in <module>
    li[4]
    ~~^^^
IndexError: list index out of range
>>> li[1:3]
[2, 4]
>>> li[2:]
[4, 3]
>>>  li[:3]
  File "<python-input-25>", line 1
    li[:3]
IndentationError: unexpected indent
>>> li[::2]
[1, 4]
>>> li[::-1]
[3, 4, 2, 1]
>>> li2 = li[:]
>>> print("I'm python.Nice to meet you!")
I'm python.Nice to meet you!
>>> li.remove(2)
>>> li.remove(2)
Traceback (most recent call last):
  File "<python-input-31>", line 1, in <module>
    li.remove(2)
    ~~~~~~~~~^^^
ValueError: list.remove(x): x not in list
>>> li.insert(1, 2)
>>> li.index(2)
1
>>> li.index(4)
2
>>> li + other_li
[1, 2, 4, 3, 4, 5, 6]
>>> li.extend(other_li)
>>> 1 in li
True
>>> len(li)
7
>>> tup = (1, 2, 3)
>>> tup[0]
1
>>> tup[0] = 3
Traceback (most recent call last):
  File "<python-input-41>", line 1, in <module>
    tup[0] = 3
    ~~~^^^
TypeError: 'tuple' object does not support item assignment
>>> type((1))
<class 'int'>
>>> type((1,))
<class 'tuple'>
>>> type(())
<class 'tuple'>
>>>
KeyboardInterrupt
>>> len(tup)
3
>>> tup + (4, 5, 6)
(1, 2, 3, 4, 5, 6)
>>> tup[:2]
(1, 2)
>>> 2 in tup
True
>>> a, b, c = (1, 2, 3)
>>> a, *b, c = (1, 2, 3, 4)
>>> d, e, f = 4, 5, 6
>>> e,d=d,e
>>> empty_dict = {}
>>> filled_dict = {"one": 1, "two": 2, "three": 3}
>>> invalid_dict = {[1,2,3]: "123"}
Traceback (most recent call last):
  File "<python-input-55>", line 1, in <module>
    invalid_dict = {[1,2,3]: "123"}
                   ^^^^^^^^^^^^^^^^
TypeError: unhashable type: 'list'
>>> valid_dict = {(1,2,3):[1,2,3]}
>>> filled_dict["one"]
1
>>> list(filled_dict.keys())
['one', 'two', 'three']
>>> list(filled_dict.keys())
['one', 'two', 'three']
>>> list(filled_dict.keys())
['one', 'two', 'three']
>>> list(filled_dict.values())
[1, 2, 3]
>>> one" in filled_dic"t
  File "<python-input-62>", line 1
    one" in filled_dic"t
       ^^^^^^^^^^^^^^^^
SyntaxError: invalid syntax
>>> 1 in filled_dict
False
>>> filled_dict["four"]
Traceback (most recent call last):
  File "<python-input-64>", line 1, in <module>
    filled_dict["four"]
    ~~~~~~~~~~~^^^^^^^^
KeyError: 'four'
>>> filled_dict.get("one")
1
>>> filled_dict.get("four")
>>> filled_dict.get("one", 4)
1
>>> filled_dict.get("four", 4)
4
>>> filled_dict.update({"four":4})
>>> filled_dict["four"] = 4
>>> filled_dict["four"] = 4
>>> del filled_dict["one"]
>>> {"a": 1, **{"b": 2}}
{'a': 1, 'b': 2}
>>> {"a": 1, **{"a": 2}}
{'a': 2}
>>> empty_set = set()
>>> some_set = {1, 1, 2, 2, 3, 4}
>>> invalid_set = {[1], 1}
Traceback (most recent call last):
  File "<python-input-77>", line 1, in <module>
    invalid_set = {[1], 1}
                  ^^^^^^^^
TypeError: unhashable type: 'list'
>>> valid_set = {(1,), 1}
>>> filled_set = some_set
>>> filled_set.add(5)
>>> filled_set.add(5)
>>> other_set = {3, 4, 5, 6}
>>> filled_set & other_set
{3, 4, 5}
>>> filled_set | other_set
{1, 2, 3, 4, 5, 6}
>>> {1, 2, 3, 4} - {2, 3, 5}
{1, 4}
>>> {1, 2, 3, 4} ^ {2, 3, 5}
{1, 4, 5}
>>> {1, 2} >= {1, 2, 3}
False
>>> {1, 2} <= {1, 2, 3}
True
>>> 2 in filled_set
True
>>> 10 in filled_set
False
>>> filled_set = some_set.copy()
>>> filled_set is some_set
False
>>>