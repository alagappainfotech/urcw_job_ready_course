        BASICS-3
ome_var = 15  # You can change this value to test different cases

if some_var > 10:
    print("some_var is totally bigger than 10.")
elif some_var < 10:
    print("some_var is smaller than 10.")
else:
    print("some_var is indeed 10.")

O/P  some_var is totally bigger than 10.
command = "run"

match command:
    case "run":
        print("The robot started to run 🏃‍♂️")
    case "speak" | "say_hi":  # multiple options (OR pattern)
        print("The robot said hi 🗣️")
    case code if command.isdigit():  # conditional
        print(f"The robot execute code: {code}")
    case _:  # _ is a wildcard that never fails (like default/else)
        print("Invalid command ❌")

O/P
 The robot started to run 🏃‍♂️ 

"""
For loops iterate over lists
prints:
    dog is a mammal
    cat is a mammal
    mouse is a mammal
"""
for animal in ["dog", "cat", "mouse"]:
    # You can use format() to interpolate formatted strings
    print("{} is a mammal".format(animal))

"""
"range(number)" returns an iterable of numbers
from zero up to (but excluding) the given number
prints:
    0
    1
    2
    3
"""
for i in range(4):
    print(i)

"""
"range(lower, upper)" returns an iterable of numbers
from the lower number to the upper number
prints:
    4
    5
    6
    7
"""
for i in range(4, 8):
    print(i)

"""
"range(lower, upper, step)" returns an iterable of numbers
from the lower number to the upper number, while incrementing
by step. If step is not indicated, the default value is 1.
prints:
 4
    6
"""
for i in range(4, 8, 2):
    print(i)

"""
Loop over a list to retrieve both the index and the value of each list item:
    0 dog
    1 cat
    2 mouse
"""
animals = ["dog", "cat", "mouse"]
for i, value in enumerate(animals):
    print(i, value)
"""
While loops go until a condition is no longer met.
prints:
    0
    1
    2
    3
"""
x = 0
while x < 4:
    print(x)
    x += 1  # Shorthand for x = x + 1
# Handle exceptions with a try/except block
try:
    # Use "raise" to raise an error
    raise IndexError("This is an index error")
except IndexError as e:
    pass                 # Refrain from this, provide a recovery (next example).
except (TypeError, NameError):
    pass              # Multiple exceptions can be processed jointly.
else:                    # Optional clause to the try/except block. Must follow
                         # all except blocks.
    print("All good!")   # Runs only if the code in try raises no exceptions
finally:                 # Execute under all circumstances
    print("We can clean up resources here")
# Instead of try/finally to cleanup resources you can use a with statement
with open("myfile.txt") as f:
    for line in f:
        print(line)

# Writing to a file
contents = {"aa": 12, "bb": 21}
with open("myfile1.txt", "w") as file:
    file.write(str(contents))        # writes a string to a file

import json
with open("myfile2.txt", "w") as file:
    file.write(json.dumps(contents))  # writes an object to a file

# Reading from a file
with open("myfile1.txt") as file:
    contents = file.read()           # reads a string from a file
print(contents)
# print: {"aa": 12, "bb": 21}
with open("myfile2.txt", "r") as file:
    contents = json.load(file)       # reads a json object from a file
print(contents)
# print: {"aa": 12, "bb": 21}
# Python offers a fundamental abstraction called the Iterable.
# An iterable is an object that can be treated as a sequence.
# The object returned by the range function, is an iterable.

filled_dict = {"one": 1, "two": 2, "three": 3}
our_iterable = filled_dict.keys()
print(our_iterable)  
O/P *[dog is a mammal
cat is a mammal
mouse is a mammal
0
1
2
3
4
5
6
7
4
6
0 dog
1 cat
2 mouse
0
1
2
3]*

filled_dict = {"one": 1, "two": 2, "three": 3}
our_iterable = = filled_dict.keys()
print(our_iterable)  # => dict_keys(['one', 'two', 'three']). This is an object
           O/P    dict_keys(['one', 'two', 'three'])

filled_dict = {"one": 1, "two": 2, "three": 3}
our_iterable = filled_dict.keys()
print(our_iterable) # => dict_keys(['one', 'two', 'three']). This is an object
# that implements our Iterable interface.
# We can loop over it.
for i in our_iterable:
print(i) # Prints one, two, three
# However we cannot address elements by index.
our_iterable[1] # Raises a TypeError
# An iterable is an object that knows how to create an iterator.
our_iterator = iter(our_iterable)
# Our iterator is an object that can remember the state as we traverse through
# it. We get the next object with "next()".
next(our_iterator) # => "one"
# It maintains state as we iterate.
next(our_iterator) # => "two"
next(our_iterator) # => "three"
# After the iterator has returned all of its data, it raises a
# StopIteration exception
next(our_iterator) # Raises StopIteration
# We can also loop over it, in fact, "for" does this implicitly!
our_iterator = iter(our_iterable)
for i in our_iterator:
print(i) # Prints one, two, three
# You can grab all the elements of an iterable or iterator by call of list().
list(our_iterable) # => Returns ["one", "two", "three"]
list(our_iterator) # => Returns [] because state is save

O/P 
dict_keys(['one', 'two', 'three'])
one
two
three


PYTHON LOOPS

fruits = ['apple', 'banana', 'cherry']
for fruit in fruits:
    print(fruit)

O/P:
apple 
banana
cherry

for i in range(5):  # range(5) generates numbers 0 to 4
    print(i)
O/P
0
1
2
3
4
count = 5
while count > 0:
    print(count)
    count -= 1
O/P
5
4
3
2
1

for i in range(1, 4):  # Outer loop
    for j in range(1, 4):  # Inner loop
        print(f"{i} x {j} = {i * j}")
O/P

1 x 1 = 1
1 x 2 = 2
1 x 3 = 3
2 x 1 = 2
2 x 2 = 4
2 x 3 = 6
3 x 1 = 3
3 x 2 = 6
3 x 3 = 9

for num in range(1, 10):
    if num == 5:
        break
    print(num)

O/P
1
2
3
4

for num in range(1, 6):
    if num == 3:
        continue
    print(num)
O/P
1
2
4
5
for num in range(1, 4):
    print(num)
else:
    print("Loop completed!")
O/P
1
2
3
loop completed!

1.# Initialize the sum
total = 0

# Loop through numbers from 1 to 100
for number in range(1, 101):
    if number % 2 == 0:  # Check if the number is even
        total += number  # Add to the total

# Print the result
print("The sum of all even numbers from 1 to 100 is:", total)

O/P
The sum of all even numbers from 1 to 100 is: 2550

# Number of rows in the pattern
rows = 3

2.# Outer loop for each row
for i in range(1, rows + 1):
    # Inner loop to print '*' i times
    for j in range(i):
        print('*', end='')
    # Move to the next line after each row
    print()
O/p
*
**
*

3.# Loop through numbers from 1 to 50
for number in range(1, 51):
    if number % 7 == 0:  # Check if the number is divisible by 7
        print("The first number divisible by 7 in the range 1 to 50 is:", number)
        break  # Stop the loop after finding the first divisible number
O/P
The first number divisible by 7 in the range 1 to 50 is: 7