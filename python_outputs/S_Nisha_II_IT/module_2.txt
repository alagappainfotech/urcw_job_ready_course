 MODULE-2
============================================================
Quick Check 1: Collection Selection
==================================================

1. Store unique user IDs for fast lookup
   Options: list, tuple, set, dict
   Best choice: set
   Reason: Sets provide O(1) average lookup time for unique elements

2. Store coordinates (x, y) that won't change
   Options: list, tuple, set, dict
 Best choice: tuple
   Reason: Tuples are immutable and perfect for fixed data like coordinates

3. Store student names with their grades
   Options: list, tuple, set, dict
   Best choice: dict
   Reason: Dictionaries provide key-value mapping for associative data

4. Store a shopping list that can be modified
   Options: list, tuple, set, dict
 Best choice: list
   Reason: Lists are mutable and maintain order for sequential data

Quick Check 2: Comprehension Writing
==================================================
Original data:
Numbers: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
Words: ['python', 'java', 'javascript', 'c++', 'go', 'rust']

List Comprehensions:
Squares: [1, 4, 9, 16, 25, 36, 49, 64, 81, 100]
Even squares: [4, 16, 36, 64, 100]
Word lengths: [6, 4, 10, 3, 2, 4]

Set Comprehensions:
Unique word lengths: {2, 3, 4, 6, 10}
Even numbers set: {2, 4, 6, 8, 10}

Dictionary Comprehensions:
Word to length: {'python': 6, 'java': 4, 'javascript': 10, 'c++': 3, 'go': 2, 'rust': 4}
Even number to square: {2: 4, 4: 16, 6: 36, 8: 64, 10: 100}

Quick Check 3: String Operations
==================================================
Original: '  Python Programming is AWESOME!  '
Strip: 'Python Programming is AWESOME!'
Lower: '  python programming is awesome!  '
Upper: '  PYTHON PROGRAMMING IS AWESOME!  '
Title: 'Python Programming Is Awesome!'
Replace: '  Python Programming is AMAZING!  '
Words: ['python', 'programming', 'is', 'awesome!']
Joined with '-': python-programming-is-awesome!

String formatting examples:
f-string: Alice is 25 years old and scored 87.5%
format(): Alice is 25 years old and scored 87.5%

Quick Check 4: Control Flow Logic
==================================================
Number analysis:
  5 -> positive odd
  -3 -> negative
  0 -> zero
  8 -> positive even
  -10 -> negative

Loop with break and continue:
Numbers processed: [1, 2, 4, 5, 7]

Quick Check 5: match/case
==================================================
{'type': 'point', 'x': 3, 'y': 3} -> diagonal point
(1, 2) -> tuple(1, 2)
request rejected -> ends with 'rejected'
42 -> unknown

Try This 1: List Manipulation
==================================================
Original list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
First 5 elements: [1, 2, 3, 4, 5]
Last 3 elements: [8, 9, 10]
Every 2nd element: [1, 3, 5, 7, 9]
Reverse: [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]
After modifications: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]
Even numbers: [2, 4, 6, 8, 10]
Squares of odd numbers: [1, 9, 25, 49, 81]
Matrix: [[0, 1, 2], [1, 2, 3], [2, 3, 4]]
Flattened matrix: [0, 1, 2, 1, 2, 3, 2, 3, 4]

Try This 2: Dictionary Usage
==================================================
Student grades:
  Alice: [85, 92, 78, 96] -> Average: 87.8
  Bob: [90, 88, 95, 87] -> Average: 90.0
  Charlie: [70, 75, 80, 72] -> Average: 74.2
  Diana: [95, 98, 92, 94] -> Average: 94.8

All students: ['Alice', 'Bob', 'Charlie', 'Diana']
All grades: [[85, 92, 78, 96], [90, 88, 95, 87], [70, 75, 80, 72], [95, 98, 92, 94]]
Student averages: {'Alice': 87.75, 'Bob': 90.0, 'Charlie': 74.25, 'Diana': 94.75}
High achievers: {'Alice': 87.75, 'Bob': 90.0, 'Diana': 94.75}

Student info: {'Alice': {'grades': [85, 92, 78, 96], 'major': 'Computer Science'}, 'Bob': {'grades': [90, 88, 95, 87], 'major': 'Mathematics'}, 'Charlie': {'grades': [70, 75, 80, 72], 'major': 'Physics'}}
Alice's major: Computer Science

Try This 3: Set Operations
==================================================
Group A: {'Alice', 'Eve', 'Diana', 'Bob', 'Charlie'}
Group B: {'Charlie', 'Bob', 'Henry', 'Grace', 'Frank'}
Group C: {'Alice', 'Ivy', 'Jack', 'Kate', 'Diana'}

Set operations:
A ∩ B (intersection): {'Bob', 'Charlie'}
A ∪ B (union): {'Alice', 'Eve', 'Diana', 'Bob', 'Grace', 'Henry', 'Charlie', 'Frank'}
A - B (difference): {'Alice', 'Diana', 'Eve'}
A △ B (symmetric difference): {'Alice', 'Eve', 'Diana', 'Henry', 'Grace', 'Frank'}

Multiple set operations:
All students: {'Alice', 'Jack', 'Kate', 'Eve', 'Diana', 'Bob', 'Grace', 'Ivy', 'Henry', 'Charlie', 'Frank'}
In all groups: set()
Only in group A: {'Eve'}

Set comprehensions:
Long names (>4 chars): {'Alice', 'Diana', 'Grace', 'Henry', 'Charlie', 'Frank'}
Names starting with 'A': {'Alice'}

Try This 4: String Processing
==================================================
Original text: '  Python is a powerful programming language. It's used for data science, web development, and automation.  '
Cleaned: 'python is a powerful programming language.', "It's used for data science, web development, and automation."]

Try This: Authentication Decorator
==================================================
Password reset for alice
Caught: Admin privileges required

Try This: Custom Context Manager
==================================================
Connecting to api.service.local...
ACK:PING
Disconnected from api.service.local