                                MODULE_2_EXERCISES_ANSWERS
"""
Module 2: Advanced Data Structures & Control Flow
Comprehensive Exercises and Lab Problems
This file contains hands-on exercises designed to reinforce the concepts
learned in Module 2. Complete these exercises to develop proficiency in
Python's advanced data structures and control flow.
"""
=============================================================================
EXERCISE SET 1: QUICK CHECKS - Immediate Reinforcement
=============================================================================
def quick_check_1_collection_selection():
    """
    Quick Check: Collection Selection
    Choose the most appropriate collection type for different scenarios.
    Consider performance, mutability, and use case requirements.
    """
    print("Quick Check 1: Collection Selection")
    print("=" * 50)
    scenarios = [
        {
            "description": "Store unique user IDs for fast lookup",
            "options": ["list", "tuple", "set", "dict"],
            "best_choice": "set",
            "reason": "Sets provide O(1) average lookup time for unique elements"
        },
        {
            "description": "Store coordinates (x, y) that won't change",
            "options": ["list", "tuple", "set", "dict"],
            "best_choice": "tuple",
            "reason": "Tuples are immutable and perfect for fixed data like coordinates"
        },
        {
            "description": "Store student names with their grades",
            "options": ["list", "tuple", "set", "dict"],
            "best_choice": "dict",
            "reason": "Dictionaries provide key-value mapping for associative data"
        },
        {
            "description": "Store a shopping list that can be modified",
            "options": ["list", "tuple", "set", "dict"],
            "best_choice": "list",
            "reason": "Lists are mutable and maintain order for sequential data"
        }
    ]
     for i, scenario in enumerate(scenarios, 1):
        print(f"\n{i}. {scenario['description']}")
        print(f"   Options: {', '.join(scenario['options'])}")
        print(f"   Best choice: {scenario['best_choice']}")
        print(f"   Reason: {scenario['reason']}")
def quick_check_2_comprehension_writing():
    """
    Quick Check: Comprehension Writing
    Write comprehensions to transform data efficiently.
    Practice list, set, and dictionary comprehensions.
    """
    print("\nQuick Check 2: Comprehension Writing")
    print("=" * 50)
    numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
    words = ["python", "java", "javascript", "c++", "go", "rust"]
    print("Original data:")
    print(f"Numbers: {numbers}")
    print(f"Words: {words}")
    print("\nList Comprehensions:")
    squares = [x**2 for x in numbers]
    even_squares = [x**2 for x in numbers if x % 2 == 0]
    word_lengths = [len(word) for word in words]
    print(f"Squares: {squares}")
    print(f"Even squares: {even_squares}")
    print(f"Word lengths: {word_lengths}")
    print("\nSet Comprehensions:")
    unique_lengths = {len(word) for word in words}
    even_numbers_set = {x for x in numbers if x % 2 == 0}
    print(f"Unique word lengths: {unique_lengths}")
    print(f"Even numbers set: {even_numbers_set}")
    print("\nDictionary Comprehensions:")
    word_to_length = {word: len(word) for word in words}
    number_to_square = {x: x**2 for x in numbers if x % 2 == 0}
    print(f"Word to length: {word_to_length}")
    print(f"Even number to square: {number_to_square}")
def quick_check_3_string_operations():
    """
    Quick Check: String Operations
    Practice string manipulation and formatting techniques.
    """
    print("\nQuick Check 3: String Operations")
    print("=" * 50)
    text = "  Python Programming is AWESOME!  "
    print(f"Original: '{text}'")
    print(f"Strip: '{text.strip()}'")
    print(f"Lower: '{text.lower()}'")
    print(f"Upper: '{text.upper()}'")
    print(f"Title: '{text.strip().title()}'")
    print(f"Replace: '{text.replace('AWESOME', 'AMAZING')}'")
    words = text.strip().lower().split()
    print(f"Words: {words}")
    print(f"Joined with '-': {'-'.join(words)}")
    name = "Alice"
    age = 25
    score = 87.5
    print(f"\nString formatting examples:")
    print(f"f-string: {name} is {age} years old and scored {score:.1f}%")
    print("format(): {} is {} years old and scored {:.1f}%".format(name, age, score))
def quick_check_4_control_flow_logic():
    """
    Quick Check: Control Flow Logic
    Predict execution paths in complex conditional and loop structures.
    """
    print("\nQuick Check 4: Control Flow Logic")
    print("=" * 50)
    def analyze_number(num):
        if num > 0:
            if num % 2 == 0:
                return "positive even"
            else:
                return "positive odd"
        elif num < 0:
            return "negative"
        else:
            return "zero"
    test_numbers = [5, -3, 0, 8, -10]
    print("Number analysis:")
    for num in test_numbers:
        result = analyze_number(num)
        print(f"  {num} -> {result}")
    print("\nLoop with break and continue:")
    numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
    result = []
    for num in numbers:
        if num % 3 == 0:
            continue 
        if num > 7:
            break    
        result.append(num)
     print(f"Numbers processed: {result}")
def quick_check_5_match_case_examples():
    """
    Quick Check: Pattern Matching (match/case)
    """
    print("\nQuick Check 5: match/case")
    print("=" * 50)
 def classify(value):
        match value:
            case {"type": "point", "x": xval, "y": yval} if xval == yval:
                return "diagonal point"
            case (a, b):
                return f"tuple({a}, {b})"
            case str() as s if s.endswith("rejected"):
                return "ends with 'rejected'"
            case _:
                return "unknown"
samples = [
        {"type": "point", "x": 3, "y": 3},
        (1, 2),
        "request rejected",
        42,
    ]
    for s in samples:
        print(s, "->", classify(s))
def try_decorator_auth():
    """
    Try This: Authentication Decorator
    Implement a decorator that enforces an `is_admin` flag on a function.
    If the caller is not admin, raise PermissionError.
    """
    print("\nTry This: Authentication Decorator")
    print("=" * 50)
 import functools
 def requires_admin(func):
        @functools.wraps(func)
        def wrapper(*args, **kwargs):
            is_admin = kwargs.pop("is_admin", False)
            if not is_admin:
                raise PermissionError("Admin privileges required")
            return func(*args, **kwargs)
        return wrapper
  @requires_admin
    def reset_user_password(username: str) -> str:
        return f"Password reset for {username}"
     try:
        print(reset_user_password("alice", is_admin=True))
        print(reset_user_password("bob", is_admin=False))
    except PermissionError as e:
        print("Caught:", e)
def try_custom_context_manager():
    """
    Try This: Custom Context Manager
    Create a context manager that simulates opening/closing a network connection
    and guarantees cleanup even on error.
    """
    print("\nTry This: Custom Context Manager")
    print("=" * 50)
  class Connection:
        def __init__(self, endpoint: str):
            self.endpoint = endpoint
            self.open = False
        def __enter__(self):
            self.open = True
            print(f"Connecting to {self.endpoint}...")
            return self
        def __exit__(self, exc_type, exc, tb):
            self.open = False
            print(f"Disconnected from {self.endpoint}")
            return False
        def send(self, payload: str) -> str:
            if not self.open:
                raise RuntimeError("not connected")
            return f"ACK:{payload}
       try:
        with Connection("api.service.local") as conn:
            print(conn.send("PING"))
    except Exception as e:
        print("Error during connection:", e)
def try_error_log_generator():
    """
    Try This: Efficient Log Processing with Generators
    Yield only ERROR lines from a file without loading whole file.
    """
    print("\nTry This: Log ERROR generator")
    print("=" * 50)
from pathlib import Path
  def error_lines(path: str):
        with open(path, 'r', encoding='utf-8', errors='ignore') as f:
            for line in f:
                if "ERROR" in line:
                    yield line.rstrip("\n")
  demo = Path("./demo.log")
    if not demo.exists():
        demo.write_text("""INFO start\nWARNING low disk\nERROR failed to open file\nINFO done\n""")
    for e in error_lines(str(demo)):
        print(e)
=============================================================================
EXERCISE SET 2: TRY THIS - Hands-on Application
=============================================================================
def try_this_1_list_manipulation():
    """
    Try This: List Manipulation
    Practice advanced list operations including slicing, methods, and comprehensions.
    """
    print("\nTry This 1: List Manipulation")
    print("=" * 50)
    numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
    print(f"Original list: {numbers}")
    print(f"First 5 elements: {numbers[:5]}")
    print(f"Last 3 elements: {numbers[-3:]}")
    print(f"Every 2nd element: {numbers[::2]}")
    print(f"Reverse: {numbers[::-1]")
    numbers_copy = numbers.copy()
    numbers_copy.append(11)
    numbers_copy.insert(0, 0)
    numbers_copy.extend([12, 13, 14])
    print(f"After modifications: {numbers_copy}")
    even_numbers = [x for x in numbers if x % 2 == 0]
    squares_of_odds = [x**2 for x in numbers if x % 2 != 0]
    print(f"Even numbers: {even_numbers}")
    print(f"Squares of odd numbers: {squares_of_odds}")
    matrix = [[i + j for j in range(3)] for i in range(3)]
    print(f"Matrix: {matrix}")
    flattened = [item for row in matrix for item in row]
    print(f"Flattened matrix: {flattened}")
def try_this_2_dictionary_usage():
    """
    Try This: Dictionary Usage
    Create and manipulate key-value data structures effectively.
    """
    print("\nTry This 2: Dictionary Usage")
    print("=" * 50)
    student_grades = {
        "Alice": [85, 92, 78, 96],
        "Bob": [90, 88, 95, 87],
        "Charlie": [70, 75, 80, 72],
        "Diana": [95, 98, 92, 94]
    }
     print("Student grades:")
    for student, grades in student_grades.items():
        average = sum(grades) / len(grades)
        print(f"  {student}: {grades} -> Average: {average:.1f}")
    print(f"\nAll students: {list(student_grades.keys())}")
    print(f"All grades: {list(student_grades.values())}")
    averages = {student: sum(grades) / len(grades) 
                for student, grades in student_grades.items()}
    print(f"Student averages: {averages}")
    high_achievers = {student: avg for student, avg in averages.items() 
                     if avg > 85}
    print(f"High achievers: {high_achievers}")
    student_info = {
        "Alice": {"grades": [85, 92, 78, 96], "major": "Computer Science"},
        "Bob": {"grades": [90, 88, 95, 87], "major": "Mathematics"},
        "Charlie": {"grades": [70, 75, 80, 72], "major": "Physics"}
    }
    print(f"\nStudent info: {student_info}")
    print(f"Alice's major: {student_info['Alice']['major']}")
def try_this_3_set_operations():
    """
    Try This: Set Operations
    Perform set mathematics and membership testing efficiently.
    """
    print("\nTry This 3: Set Operations")
    print("=" * 50)
    group_a = {"Alice", "Bob", "Charlie", "Diana", "Eve"}
    group_b = {"Bob", "Charlie", "Frank", "Grace", "Henry"}
    group_c = {"Alice", "Diana", "Ivy", "Jack", "Kate"}
    print(f"Group A: {group_a}")
    print(f"Group B: {group_b}")
    print(f"Group C: {group_c}")
    intersection_ab = group_a & group_b
    union_ab = group_a | group_b
    difference_ab = group_a - group_b
    symmetric_diff_ab = group_a ^ group_b
    print(f"\nSet operations:")
    print(f"A ∩ B (intersection): {intersection_ab}")
    print(f"A ∪ B (union): {union_ab}")
    print(f"A - B (difference): {difference_ab}")
    print(f"A △ B (symmetric difference): {symmetric_diff_ab}")
    all_students = group_a | group_b | group_c
    in_all_groups = group_a & group_b & group_c
    only_in_a = group_a - group_b - group_c
    print(f"\nMultiple set operations:")
    print(f"All students: {all_students}")
    print(f"In all groups: {in_all_groups}")
    print(f"Only in group A: {only_in_a}")
    long_names = {name for name in all_students if len(name) > 4}
    names_starting_with_a = {name for name in all_students if name.startswith('A')}
    print(f"\nSet comprehensions:")
    print(f"Long names (>4 chars): {long_names}")
    print(f"Names starting with 'A': {names_starting_with_a}")
def try_this_4_string_processing():
    """
    Try This: String Processing
    Format and transform text data using various string methods.
    """
    print("\nTry This 4: String Processing")
    print("=" * 50)
    text = "  Python is a powerful programming language. It's used for data science, web development, and automation.  "
    print(f"Original text: '{text}'")
    cleaned = text.strip().lower()
    print(f"Cleaned: '{cleaned}'")
    words = cleaned.replace(",", "").replace(".", "").replace("'", "").split()
    print(f"Words: {words}")
    word_freq = {}
    for word in words:
        word_freq[word] = word_freq.get(word, 0) + 1
    print(f"Word frequency: {word_freq}")
    most_common = sorted(word_freq.items(), key=lambda x: x[1], reverse=True)[:3]
    print(f"Most common words: {most_common}")
    name = "Alice"
    age = 25
    languages = ["Python", "JavaScript", "SQL"]
    print(f"\nString formatting examples:")
    print(f"f-string: {name} is {age} years old and knows {', '.join(languages)}")
    print("format(): {} is {} years old and knows {}".format(name, age, ', '.join(languages)))
    sentences = text.strip().split('.')
    capitalized_sentences = [s.strip().capitalize() + '.' for s in sentences if s.strip()]
    print(f"Capitalized sentences: {capitalized_sentences}")
=============================================================================
 EXERCISE SET 3: LAB PROBLEMS - Critical Thinking
=============================================================================
def lab_1_data_analysis_system():
    """
    Lab Problem 1: Data Analysis System
    Build a comprehensive system to process and analyze structured data
    using various collection types and control flow structures.
    """
    print("\nLab Problem 1: Data Analysis System")
    print("=" * 50)
    sales_data = [
        {"product": "Laptop", "category": "Electronics", "price": 999.99, "quantity": 5, "region": "North"},
        {"product": "Mouse", "category": "Electronics", "price": 29.99, "quantity": 20, "region": "North"},
        {"product": "Keyboard", "category": "Electronics", "price": 79.99, "quantity": 15, "region": "South"},
        {"product": "Monitor", "category": "Electronics", "price": 299.99, "quantity": 8, "region": "North"},
        {"product": "Desk", "category": "Furniture", "price": 199.99, "quantity": 3, "region": "South"},
        {"product": "Chair", "category": "Furniture", "price": 149.99, "quantity": 7, "region": "North"},
        {"product": "Lamp", "category": "Furniture", "price": 49.99, "quantity": 12, "region": "South"},
        {"product": "Book", "category": "Education", "price": 19.99, "quantity": 50, "region": "North"},
        {"product": "Pen", "category": "Education", "price": 2.99, "quantity": 100, "region": "South"},
    ]
     print("Sales Data Analysis")
    print("-" * 30)
    category_revenue = {}
    for item in sales_data:
        category = item["category"]
        revenue = item["price"] * item["quantity"]
        category_revenue[category] = category_revenue.get(category, 0) + revenue
    print("Revenue by category:")
    for category, revenue in sorted(category_revenue.items(), key=lambda x: x[1], reverse=True):
        print(f"  {category}: ${revenue:,.2f}")
    product_values = {item["product"]: item["price"] * item["quantity"] 
                     for item in sales_data}
    top_products = sorted(product_values.items(), key=lambda x: x[1], reverse=True)[:3]
    print(f"\nTop 3 products by total value:")
    for product, value in top_products:
        print(f"  {product}: ${value:,.2f}")
    regional_sales = {}
    for item in sales_data:
        region = item["region"]
        if region not in regional_sales:
            regional_sales[region] = {"revenue": 0, "products": set()}
        regional_sales[region]["revenue"] += item["price"] * item["quantity"]
        regional_sales[region]["products"].add(item["product"])
    print(f"\nRegional analysis:")
    for region, data in regional_sales.items():
        print(f"  {region}: ${data['revenue']:,.2f} revenue, {len(data['products'])} unique products")
    prices = [item["price"] for item in sales_data]
    price_ranges = {
        "Under $50": len([p for p in prices if p < 50]),
        "$50-$100": len([p for p in prices if 50 <= p < 100]),
        "$100-$500": len([p for p in prices if 100 <= p < 500]),
        "Over $500": len([p for p in prices if p >= 500])
    }
     print(f"\nPrice range distribution:")
    for range_name, count in price_ranges.items():
        print(f"  {range_name}: {count} products")
def lab_2_text_processing_engine():
    """
    Lab Problem 2: Text Processing Engine
    Build a comprehensive text processing system that analyzes documents,
    extracts information, and generates reports.
    """
    print("\nLab Problem 2: Text Processing Engine")
    print("=" * 50)
    document = """
    Python is a high-level programming language. Python was created by Guido van Rossum.
    Python is widely used for web development, data science, and automation.
    Python has a simple syntax that makes it easy to learn.
    Many companies use Python for their backend systems.
    Python's extensive library ecosystem makes it very powerful.
    ""
  def clean_text(text):
        """Clean and normalize text for analysis."""
        import string
        cleaned = text.lower()
        for punct in string.punctuation:
            cleaned = cleaned.replace(punct, ' ')
        return cleaned
    def analyze_text(text):
        """Comprehensive text analysis."""
        cleaned = clean_text(text)
        words = [word for word in cleaned.split() if word]
        word_count = len(words)
        unique_words = len(set(words))
        avg_word_length = sum(len(word) for word in words) / len(words) if words else 0
        word_freq = {}
        for word in words:
            word_freq[word] = word_freq.get(word, 0) + 1
        most_common = sorted(word_freq.items(), key=lambda x: x[1], reverse=True)[:5]
        longest_words = sorted(set(words), key=len, reverse=True)[:5])
        length_dist = {}
        for word in words:
            length = len(word)
            length_dist[length] = length_dist.get(length, 0) + 1
       return {
            "word_count": word_count,
            "unique_words": unique_words,
            "avg_word_length": avg_word_length,
            "most_common": most_common,
            "longest_words": longest_words,
            "length_distribution": length_dist
        }
    analysis = analyze_text(document)
    print("Text Analysis Report")
    print("-" * 30)
    print(f"Total words: {analysis['word_count']}")
    print(f"Unique words: {analysis['unique_words']}")
    print(f"Average word length: {analysis['avg_word_length']:.1f} characters")
    print(f"\nMost common words:")
    for word, count in analysis['most_common']:
        print(f"  {word}: {count}")
    print(f"\nLongest words:")
    for word in analysis['longest_words']:
        print(f"  {word} ({len(word)} characters)")
    print(f"\nWord length distribution:")
    for length, count in sorted(analysis['length_distribution'].items()):
        print(f"  {length} characters: {count} words")
    sentences = [s.strip() for s in document.split('.') if s.strip()]
    sentence_lengths = [len(s.split()) for s in sentences]
    print(f"\nSentence analysis:")
    print(f"Number of sentences: {len(sentences)}")
    print(f"Average sentence length: {sum(sentence_lengths) / len(sentence_lengths):.1f} words")
    print(f"Shortest sentence: {min(sentence_lengths)} words")
    print(f"Longest sentence: {max(sentence_lengths)} words")
def lab_3_inventory_management_system():
    """
    Lab Problem 3: Inventory Management System
    Create a product tracking system that manages inventory,
    tracks sales, and generates business reports.
    """
    print("\nLab Problem 3: Inventory Management System")
    print("=" * 50)
    class InventoryManager:
        def __init__(self):
            self.products = {}
            self.sales_history = []
        def add_product(self, product_id, name, category, price, initial_stock):
            """Add a new product to inventory."""
            self.products[product_id] = {
                "name": name,
                "category": category,
                "price": price,
                "stock": initial_stock,
                "total_sold": 0
            }
       def sell_product(self, product_id, quantity):
            """Record a sale and update inventory."""
            if product_id not in self.products:
                return False, "Product not found"
            product = self.products[product_id]
            if product["stock"] < quantity:
                return False, "Insufficient stock"
            product["stock"] -= quantity
            product["total_sold"] += quantity
            sale = {
                "product_id": product_id,
                "quantity": quantity,
                "revenue": product["price"] * quantity,
                "timestamp": "2024-01-01"  # Simplified timestamp
            }
            self.sales_history.append(sale)
             return True, f"Sale recorded: {quantity} units of {product['name']}"
        def get_low_stock_products(self, threshold=5):
            """Find products with low stock."""
            return {pid: product for pid, product in self.products.items() 
                   if product["stock"] <= threshold}
        def get_category_summary(self):
            """Get summary by category."""
            category_data = {}
            for product in self.products.values():
                category = product["category"]
                if category not in category_data:
                    category_data[category] = {
                        "products": 0,
                        "total_stock": 0,
                        "total_value": 0,
                        "total_sold": 0
                    }
                category_data[category]["products"] += 1
                category_data[category]["total_stock"] += product["stock"]
                category_data[category]["total_value"] += product["price"] * product["stock"]
                category_data[category]["total_sold"] += product["total_sold"]
            return category_data
        def get_top_selling_products(self, limit=5):
            """Get top selling products."""
            return sorted(self.products.items(), 
                         key=lambda x: x[1]["total_sold"], 
                         reverse=True)[:limit]
    inventory = InventoryManager()
    products_to_add = [
        ("LAP001", "Gaming Laptop", "Electronics", 1299.99, 10),
        ("MOU001", "Wireless Mouse", "Electronics", 29.99, 50),
        ("KEY001", "Mechanical Keyboard", "Electronics", 89.99, 25),
        ("DESK001", "Office Desk", "Furniture", 199.99, 5),
        ("CHAIR001", "Ergonomic Chair", "Furniture", 299.99, 8),
        ("BOOK001", "Python Programming", "Books", 49.99, 20),
        ("PEN001", "Ballpoint Pen", "Office", 2.99, 100)
    ]
    for product_data in products_to_add:
        inventory.add_product(*product_data)
    print("Inventory Management System")
    print("-" * 40)
    sales_to_record = [
        ("LAP001", 2),
        ("MOU001", 10),
        ("KEY001", 5),
        ("DESK001", 1),
        ("CHAIR001", 3),
        ("BOOK001", 8),
        ("PEN001", 25)
    ]
    print("Recording sales...")
    for product_id, quantity in sales_to_record:
        success, message = inventory.sell_product(product_id, quantity)
        print(f"  {message}")
    print(f"\nInventory Reports:")
    print("-" * 20)
    low_stock = inventory.get_low_stock_products(threshold=10)
    print(f"Low stock products (≤10 units):")
    for pid, product in low_stock.items():
        print(f"  {product['name']}: {product['stock']} units")
    category_summary = inventory.get_category_summary()
    print(f"\nCategory summary:")
    for category, data in category_summary.items():
        print(f"  {category}:")
        print(f"    Products: {data['products']}")
        print(f"    Total stock: {data['total_stock']} units")
        print(f"    Total value: ${data['total_value']:,.2f}")
        print(f"    Total sold: {data['total_sold']} units")
    top_sellers = inventory.get_top_selling_products(limit=3)
    print(f"\nTop selling products:")
    for pid, product in top_sellers:
        print(f"  {product['name']}: {product['total_sold']} units sold")
def lab_4_student_records_system():
    """
    Lab Problem 4: Student Records System
    Design a comprehensive grade management system that handles
    multiple students, courses, and generates detailed reports.
    """
    print("\nLab Problem 4: Student Records System")
    print("=" * 50)
    class StudentRecordsSystem:
        def __init__(self):
            self.students = {}
            self.courses = {}
      def add_student(self, student_id, name, major, year):
            """Add a new student."""
            self.students[student_id] = {
                "name": name,
                "major": major,
                "year": year,
                "courses": {}
            }
     def add_course(self, course_id, name, credits, instructor):
            """Add a new course."""
            self.courses[course_id] = {
                "name": name,
                "credits": credits,
                "instructor": instructor
            }
     def enroll_student(self, student_id, course_id):
            """Enroll a student in a course."""
            if student_id not in self.students:
                return False, "Student not found"
            if course_id not in self.courses:
                return False, "Course not found"
            self.students[student_id]["courses"][course_id] = {
                "grades": [],
                "credits": self.courses[course_id]["credits"]
            }
            return True, "Student enrolled successfully"
       def add_grade(self, student_id, course_id, grade):
            """Add a grade for a student in a course."""
            if (student_id not in self.students or 
                course_id not in self.students[student_id]["courses"]):
                return False, "Student not enrolled in course"
            self.students[student_id]["courses"][course_id]["grades"].append(grade)
            return True, "Grade added successfully"
         def calculate_gpa(self, student_id):
            """Calculate GPA for a student."""
            if student_id not in self.students:
                return None
            total_points = 0
            total_credits = 0
            for course_id, course_data in self.students[student_id]["courses"].items():
                grades = course_data["grades"]
                credits = course_data["credits"]
                if grades:  
                    avg_grade = sum(grades) / len(grades)
                    if avg_grade >= 90:
                        gpa_points = 4.0
                    elif avg_grade >= 80:
                        gpa_points = 3.0
                    elif avg_grade >= 70:
                        gpa_points = 2.0
                    elif avg_grade >= 60:
                        gpa_points = 1.0
                    else:
                        gpa_points = 0.0
                    total_points += gpa_points * credits
                    total_credits += credits
             return total_points / total_credits if total_credits > 0 else 0.0
      def get_class_rankings(self):
            """Get class rankings by GPA."""
            rankings = []
            for student_id, student_data in self.students.items():
                gpa = self.calculate_gpa(student_id)
                if gpa is not None:
                    rankings.append((student_id, student_data["name"], gpa))
             return sorted(rankings, key=lambda x: x[2], reverse=True)
       def get_course_statistics(self, course_id):
            """Get statistics for a specific course."""
            if course_id not in self.courses:
                return None
            all_grades = []
            enrolled_students = 0
            for student_data in self.students.values():
                if course_id in student_data["courses"]:
                    grades = student_data["courses"][course_id]["grades"]
                    all_grades.extend(grades)
                    enrolled_students += 1
            if not all_grades:
                return {"enrolled": enrolled_students, "grades": []}
            return {
                "enrolled": enrolled_students,
                "grades": all_grades,
                "average": sum(all_grades) / len(all_grades),
                "highest": max(all_grades),
                "lowest": min(all_grades)
            }
    system = StudentRecordsSystem()
    courses = [
        ("CS101", "Introduction to Programming", 3, "Dr. Smith"),
        ("CS102", "Data Structures", 3, "Dr. Johnson"),
        ("MATH101", "Calculus I", 4, "Dr. Brown"),
        ("ENG101", "English Composition", 3, "Dr. Davis")
    ]
    for course_data in courses:
        system.add_course(*course_data)
    students = [
        ("S001", "Alice Johnson", "Computer Science", "Sophomore"),
        ("S002", "Bob Smith", "Computer Science", "Junior"),
        ("S003", "Charlie Brown", "Mathematics", "Freshman"),
        ("S004", "Diana Davis", "Computer Science", "Senior")
    ]
    for student_data in students:
        system.add_student(*student_data)
    enrollments = [
        ("S001", "CS101"), ("S001", "MATH101"), ("S001", "ENG101"),
        ("S002", "CS101"), ("S002", "CS102"), ("S002", "MATH101"),
        ("S003", "MATH101"), ("S003", "ENG101"),
        ("S004", "CS101"), ("S004", "CS102"), ("S004", "MATH101")
    ]
    for student_id, course_id in enrollments:
        system.enroll_student(student_id, course_id)
    grades = [
        ("S001", "CS101", 85), ("S001", "CS101", 90), ("S001", "CS101", 88),
        ("S001", "MATH101", 92), ("S001", "MATH101", 89), ("S001", "MATH101", 94),
        ("S001", "ENG101", 87), ("S001", "ENG101", 91),
        ("S002", "CS101", 78), ("S002", "CS101", 82), ("S002", "CS101", 85),
        ("S002", "CS102", 88), ("S002", "CS102", 90),
        ("S002", "MATH101", 85), ("S002", "MATH101", 87),
        ("S003", "MATH101", 95), ("S003", "MATH101", 98), ("S003", "MATH101", 96),
        ("S003", "ENG101", 89), ("S003", "ENG101", 92),
        ("S004", "CS101", 92), ("S004", "CS101", 94), ("S004", "CS101", 96),
        ("S004", "CS102", 90), ("S004", "CS102", 93),
        ("S004", "MATH101", 88), ("S004", "MATH101", 91)
    ]
    for student_id, course_id, grade in grades:
        system.add_grade(student_id, course_id, grade)
    print("Student Records System")
    print("-" * 30)
    print("Student GPAs:")
    for student_id, student_data in system.students.items():
        gpa = system.calculate_gpa(student_id)
        print(f"  {student_data['name']}: {gpa:.2f}")
    print(f"\nClass Rankings:")
    rankings = system.get_class_rankings()
    for i, (student_id, name, gpa) in enumerate(rankings, 1):
        print(f"  {i}. {name}: {gpa:.2f}")
    print(f"\nCourse Statistics:")
    for course_id, course_data in system.courses.items():
        stats = system.get_course_statistics(course_id)
        if stats and stats["grades"]:
            print(f"  {course_data['name']}:")
            print(f"    Enrolled: {stats['enrolled']} students")
            print(f"    Average: {stats['average']:.1f}")
            print(f"    Highest: {stats['highest']}")
            print(f"    Lowest: {stats['lowest']}")
 =============================================================================
 MAIN EXECUTION
=============================================================================
def run_all_exercises():
    """Run all exercises in sequence."""
    print("MODULE 2: ADVANCED DATA STRUCTURES & CONTROL FLOW")
    print("COMPREHENSIVE EXERCISES")
    print("=" * 60)
    quick_check_1_collection_selection()
    quick_check_2_comprehension_writing()
    quick_check_3_string_operations()
    quick_check_4_control_flow_logic()
    quick_check_5_match_case_examples()
    try_this_1_list_manipulation()
    try_this_2_dictionary_usage()
    try_this_3_set_operations()
    try_this_4_string_processing()
    try_decorator_auth()
    try_custom_context_manager()
    try_error_log_generator()
    lab_1_data_analysis_system()
    lab_2_text_processing_engine()
    lab_3_inventory_management_system()
    lab_4_student_records_system()
    print("\n" + "=" * 60)
    print("MODULE 2 EXERCISES COMPLETE!")
    print("Review your solutions and ensure they follow Pythonic best practices.")
    print("Next: Module 3 - Code Organization, Functions & Error Handling")
    print("=" * 60)
if __name__ == "__main__":
    run_all_exercises()
MODULE 2: ADVANCED DATA STRUCTURES & CONTROL FLOW
COMPREHENSIVE EXERCISES
============================================================
Quick Check 1: Collection Selection
==================================================

1. Store unique user IDs for fast lookup
   Options: list, tuple, set, dict
   Best choice: set
   Reason: Sets provide O(1) average lookup time for unique elements

2. Store coordinates (x, y) that won't change
   Options: list, tuple, set, dict
   Best choice: tuple
   Reason: Tuples are immutable and perfect for fixed data like coordinates

3. Store student names with their grades
   Options: list, tuple, set, dict
   Best choice: dict
   Reason: Dictionaries provide key-value mapping for associative data

4. Store a shopping list that can be modified
   Options: list, tuple, set, dict
   Best choice: list
   Reason: Lists are mutable and maintain order for sequential data

Quick Check 2: Comprehension Writing
==================================================
Original data:
Numbers: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
Words: ['python', 'java', 'javascript', 'c++', 'go', 'rust']

List Comprehensions:
Squares: [1, 4, 9, 16, 25, 36, 49, 64, 81, 100]
Even squares: [4, 16, 36, 64, 100]
Word lengths: [6, 4, 10, 3, 2, 4]

Set Comprehensions:
Unique word lengths: {2, 3, 4, 6, 10}
Even numbers set: {2, 4, 6, 8, 10}

Dictionary Comprehensions:
Word to length: {'python': 6, 'java': 4, 'javascript': 10, 'c++': 3, 'go': 2, 'rust': 4}
Even number to square: {2: 4, 4: 16, 6: 36, 8: 64, 10: 100}

Quick Check 3: String Operations
==================================================
Original: '  Python Programming is AWESOME!  '
Strip: 'Python Programming is AWESOME!'
Lower: '  python programming is awesome!  '
Upper: '  PYTHON PROGRAMMING IS AWESOME!  '
Title: 'Python Programming Is Awesome!'
Replace: '  Python Programming is AMAZING!  '
Words: ['python', 'programming', 'is', 'awesome!']
Joined with '-': python-programming-is-awesome!

String formatting examples:
f-string: Alice is 25 years old and scored 87.5%
format(): Alice is 25 years old and scored 87.5%

Quick Check 4: Control Flow Logic
==================================================
Number analysis:
  5 -> positive odd
  -3 -> negative
  0 -> zero
  8 -> positive even
  -10 -> negative

Loop with break and continue:
Numbers processed: [1, 2, 4, 5, 7]

Quick Check 5: match/case
==================================================
{'type': 'point', 'x': 3, 'y': 3} -> diagonal point
(1, 2) -> tuple(1, 2)
request rejected -> ends with 'rejected'
42 -> unknown

Try This 1: List Manipulation
==================================================
Original list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
First 5 elements: [1, 2, 3, 4, 5]
Last 3 elements: [8, 9, 10]
Every 2nd element: [1, 3, 5, 7, 9]
Reverse: [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]
After modifications: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]
Even numbers: [2, 4, 6, 8, 10]
Squares of odd numbers: [1, 9, 25, 49, 81]
Matrix: [[0, 1, 2], [1, 2, 3], [2, 3, 4]]
Flattened matrix: [0, 1, 2, 1, 2, 3, 2, 3, 4]

Try This 2: Dictionary Usage
==================================================
Student grades:
  Alice: [85, 92, 78, 96] -> Average: 87.8
  Bob: [90, 88, 95, 87] -> Average: 90.0
  Charlie: [70, 75, 80, 72] -> Average: 74.2
  Diana: [95, 98, 92, 94] -> Average: 94.8

All students: ['Alice', 'Bob', 'Charlie', 'Diana']
All grades: [[85, 92, 78, 96], [90, 88, 95, 87], [70, 75, 80, 72], [95, 98, 92, 94]]
Student averages: {'Alice': 87.75, 'Bob': 90.0, 'Charlie': 74.25, 'Diana': 94.75}
High achievers: {'Alice': 87.75, 'Bob': 90.0, 'Diana': 94.75}

Student info: {'Alice': {'grades': [85, 92, 78, 96], 'major': 'Computer Science'}, 'Bob': {'grades': [90, 88, 95, 87], 'major': 'Mathematics'}, 'Charlie': {'grades': [70, 75, 80, 72], 'major': 'Physics'}}
Alice's major: Computer Science

Try This 3: Set Operations
==================================================
Group A: {'Alice', 'Eve', 'Diana', 'Bob', 'Charlie'}
Group B: {'Charlie', 'Bob', 'Henry', 'Grace', 'Frank'}
Group C: {'Alice', 'Ivy', 'Jack', 'Kate', 'Diana'}

Set operations:
A ∩ B (intersection): {'Bob', 'Charlie'}
A ∪ B (union): {'Alice', 'Eve', 'Diana', 'Bob', 'Grace', 'Henry', 'Charlie', 'Frank'}
A - B (difference): {'Alice', 'Diana', 'Eve'}
A △ B (symmetric difference): {'Alice', 'Eve', 'Diana', 'Henry', 'Grace', 'Frank'}

Multiple set operations:
All students: {'Alice', 'Jack', 'Kate', 'Eve', 'Diana', 'Bob', 'Grace', 'Ivy', 'Henry', 'Charlie', 'Frank'}
In all groups: set()
Only in group A: {'Eve'}

Set comprehensions:
Long names (>4 chars): {'Alice', 'Diana', 'Grace', 'Henry', 'Charlie', 'Frank'}
Names starting with 'A': {'Alice'}

Try This 4: String Processing
==================================================
Original text: '  Python is a powerful programming language. It's used for data science, web development, and automation.  '
Cleaned: 'python is a powerful programming language. it's used for data science, web development, and automation.'
Words: ['python', 'is', 'a', 'powerful', 'programming', 'language', 'its', 'used', 'for', 'data', 'science', 'web', 'development', 'and', 'automation']
Word frequency: {'python': 1, 'is': 1, 'a': 1, 'powerful': 1, 'programming': 1, 'language': 1, 'its': 1, 'used': 1, 'for': 1, 'data': 1, 'science': 1, 'web': 1, 'development': 1, 'and': 1, 'automation': 1}
Most common words: [('python', 1), ('is', 1), ('a', 1)]

String formatting examples:
f-string: Alice is 25 years old and knows Python, JavaScript, SQL
format(): Alice is 25 years old and knows Python, JavaScript, SQL
Capitalized sentences: ['Python is a powerful programming language.', "It's used for data science, web development, and automation."]

Try This: Authentication Decorator
==================================================
Password reset for alice
Caught: Admin privileges required

Try This: Custom Context Manager
==================================================
Connecting to api.service.local...
ACK:PING
Disconnected from api.service.local