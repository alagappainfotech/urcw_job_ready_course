def quick_check_1_pythonic_style():
    """
    Quick Check: Pythonic Style Evaluation
    Evaluate the following variable and function names against PEP 8 conventions.
    Identify which are good and which need improvement.
    """

    
print("Quick Check 1: Pythonic Style Evaluation")
Quick Check 1: Pythonic Style Evaluation
print("=" * 50)
==================================================
names_to_evaluate = [
    "userName",
    "total_count",
    "MAX_SIZE",
    "getUserData",
    "X",
    "calculate_average_grade",
    "temp_var",
    "is_valid",
    "data_list",
    "process_data"
]
print("Evaluate these names for PEP 8 compliance:")
Evaluate these names for PEP 8 compliance:
for name in names_to_evaluate:
    print(f"  {name}")

    
  userName
  total_count
  MAX_SIZE
  getUserData
  X
  calculate_average_grade
  temp_var
  is_valid
  data_list
  process_data
print("\nGood names follow these rules:")

Good names follow these rules:
print("- Use snake_case for variables and functions")
- Use snake_case for variables and functions
print("- Use UPPER_CASE for constants")
- Use UPPER_CASE for constants
print("- Be descriptive but concise")
- Be descriptive but concise
print("- Avoid single letters (except in loops)")
- Avoid single letters (except in loops)
print("- Avoid redundant words (like 'data_list')")
- Avoid redundant words (like 'data_list')
def quick_check_2_type_identification():
    """
    Quick Check: Type Identification
    
    Given various objects, determine their types and understand
    the implications of different data types.
    """

    
print("\nQuick Check 2: Type Identification")

Quick Check 2: Type Identification
print("=" * 50)
==================================================
test_objects = [
    1234,
    8.99,
    9.0,
    True,
    False,
    "hello",
    None,
    [1,2,3],
    (1,2,3),
    {1,2,3},
    {"a": 1},
    3 + 4j,
]

print("Object -> Type -> Truthiness")
Object -> Type -> Truthiness
print("-" * 30)
------------------------------
for obj in test_objects:
    obj_type = type(obj).__name__
    truthiness = bool(obj)

    
print(f"{obj!r:>10} -> {obj_type:<10} -> {truthiness}")
    (3+4j) -> complex    -> True
def quick_check_3_operator_precedence():
    """
    Quick Check: Operator Precedence
    
    Predict the results of complex expressions before running them.
    This helps develop intuition about Python's operator precedence.
    """

    
print("\nQuick Check 3: Operator Precedence")

Quick Check 3: Operator Precedence
print("=" * 50)
==================================================
expressions = [
    ("2 + 3 * 4", "Multiplication before addition"),
    ("(2 + 3) * 4", "Parentheses override precedence"),
    ("2 ** 3 ** 2", "Right-associative exponentiation"),
    ("(2 ** 3) ** 2", "Parentheses change associativity"),
    ("10 / 3 * 3", "Left-to-right for same precedence"),
    ("10 // 3 * 3", "Floor division vs regular division"),
    ("not True and False", "not has higher precedence than and"),
    ("not (True and False)", "Parentheses change evaluation order"),
]
print("Expression -> Result -> Explanation")
Expression -> Result -> Explanation
print("-" * 50)
--------------------------------------------------
for expr, explanation in expressions:
    try:
        result = eval(expr)
        print(f"{expr:<20} -> {result:<8} -> {explanation}")
    except Exception as e:
        print(f"{expr:<20} -> ERROR: {e}")

        
2 + 3 * 4            -> 14       -> Multiplication before addition
(2 + 3) * 4          -> 20       -> Parentheses override precedence
2 ** 3 ** 2          -> 512      -> Right-associative exponentiation
(2 ** 3) ** 2        -> 64       -> Parentheses change associativity
10 / 3 * 3           -> 10.0     -> Left-to-right for same precedence
10 // 3 * 3          -> 9        -> Floor division vs regular division
not True and False   -> 0        -> not has higher precedence than and
not (True and False) -> 1        -> Parentheses change evaluation order
def try_this_1_input_and_conversion():
    """
    Try This: Getting Input and Type Conversion
    
    Experiment with input() function and type conversion.
    Handle different input scenarios gracefully.
    """

    
print("\nTry This 1: Getting Input and Type Conversion")

Try This 1: Getting Input and Type Conversion
print("=" * 50)
==================================================
test_inputs = ["123", "45.67", "hello", "", "  42  "]
for user_input in test_inputs:
    print(f"\nTesting input: '{user_input}'")

    

Testing input: '123'

Testing input: '45.67'

Testing input: 'hello'

Testing input: ''

Testing input: '  42  '
print(f"Original type: {type(user_input).__name__}")
Original type: str
try:
    int_value = int(user_input)
    print(f"As integer: {int_value}")
except ValueError:
    print("Cannot convert to integer")

    
As integer: 42
try:
    float_value = float(user_input)
    print(f"As float: {float_value}")
except ValueError:
    print("Cannot convert to float")

    
As float: 42.0
stripped = user_input.strip()
if stripped.isdigit():
    print("Contains only digits")
elif stripped.replace('.', '').isdigit():
    print("Contains only digits and one decimal point")
else:
    print("Contains non-numeric characters")

    
Contains only digits
def try_this_2_variable_manipulation():
    """
    Try This: Variable Manipulation
    
    Practice binding values to variables and observe how changes
    affect different variables.
    """

    
print("\nTry This 2: Variable Manipulation")

Try This 2: Variable Manipulation
print("=" * 50)
==================================================
pi = 3.14159
radius = 2.2
area = pi * radius ** 2
circumference = 2 * pi * radius
print(f"Circle with radius {radius}:")
Circle with radius 2.2:
print(f"  Area: {area:.2f}")
  Area: 15.21
print(f"  Circumference: {circumference:.2f}")
  Circumference: 13.82
print(f"\nChanging radius to 5.0...")

Changing radius to 5.0...
radius = 5.0
print(f"New radius: {radius}")
New radius: 5.0
print(f"Area is still: {area:.2f} (not recalculated!)")
Area is still: 15.21 (not recalculated!)
print(f"Circumference is still: {circumference:.2f} (not recalculated!)")
Circumference is still: 13.82 (not recalculated!)
area = pi * radius ** 2
circumference = 2 * pi * radius
print(f"After recalculation:")
After recalculation:
print(f"  Area: {area:.2f}")
  Area: 78.54
print(f"  Circumference: {circumference:.2f}")

  Circumference: 31.42
def try_this_3_string_operations():
    """
    Try This: String Operations
    
    Practice string manipulation, formatting, and escape sequences.
    """

    
print("\nTry This 3: String Operations")

Try This 3: String Operations
print("=" * 50)
==================================================
first_name = "John"
last_name = "Doe"
age = 25
full_name = first_name + " " + last_name
print(f"Full name: {full_name}")
Full name: John Doe
separator = "=" * 30
print(separator)
==============================
print("Escape sequences:")
Escape sequences:
print("New line: Line 1\\nLine 2")
New line: Line 1\nLine 2
print("Tab: Column1\\tColumn2")
Tab: Column1\tColumn2
print("Quote: He said \\\"Hello\\\"")
Quote: He said \"Hello\"
print("Backslash: Path: C:\\\\Users\\\\Name")
Backslash: Path: C:\\Users\\Name
multi_line = """
This is a multi-line string.
It can span multiple lines.
Perfect for documentation!
"""

print("Multi-line string:")
Multi-line string:
print(multi_line)

This is a multi-line string.
It can span multiple lines.
Perfect for documentation!



233