1+1
2
8-1
7
10*2
20
35/5
7.0
5//3
1
-5//3
-2
5.0//3.0
1.0
-5.0//3.0
-2.0
10.0/3
3.3333333333333335
7%3
1
-7%3
2
2**3
8
1+3*2
7
True
True
False
False
not True
False
not False
True
True and False
False
False or True
True
True+True
2
True*8
8
False-5
-5
0==False
True
2>True
True
2==True
False
-5!=False
True
bool(0)
False
bool("")
False
bool([])
False
bool({})
False
bool(())
False
bool(set())
False
bool(4)
True
bool(-6)
True
bool(o)
Traceback (most recent call last):
  File "<pyshell#34>", line 1, in <module>
    bool(o)
NameError: name 'o' is not defined
bool(0)
False
bool(2)
True
0 and2
SyntaxError: invalid syntax
0 and 2
0
bool(-5)
True
bool(2)
True
-5 or 0
-5
1 ==1
True
2 ==1
False
1 != 1
False
2!=1
True
1<10
True
1>10
False
2<=2
True
2>=2
True
1<2 and 2<3
True
2<3and3<2
SyntaxError: invalid decimal literal
2<3 and 3<2
False
1<2<3
True
2<3<2
False
a =[1,2,3,4]
b=a
b is a
True
b == a
True
b=[1,2,3,4]
b is a
False
b == a
True
"This is a string."
'This is a string.'
"Hello world!"[0]
'H'
len("This is a string")
16
name = "Reiko"
f"She said her name is {name}. "
'She said her name is Reiko. '
f"{name} is{len(name)} characters long."
'Reiko is5 characters long.'
None
"etc" == None
False
None == None
True
print("\n"+ "="*50)

==================================================
print("TRY THIS EXERCISE")
TRY THIS EXERCISE
print('="*50)
      
SyntaxError: unterminated string literal (detected at line 1)
print("="*50)
      
==================================================
print("\n1.Getting Input and Type Conversion:")
      

1.Getting Input and Type Conversion:
print("-" * 40)
      
----------------------------------------
print("\n2. Variable Manipulation:")
      

2. Variable Manipulation:
print("-" * 40)
      
----------------------------------------
pi=3.14159
      
radius= 2.2
      
area=pi * radius ** 2
      
print(f"Circle with radius {radius} has area: {area}")
      
Circle with radius 2.2 has area: 15.205295600000001
meters=200
      
feet meters *3.28
      
SyntaxError: invalid syntax
feet = meters *3.28
      
print(f"{meters} meters = {feet} feet")
      
200 meters = 656.0 feet
meters = 300
      
print(f"After changing meters to {meters}, feet is still:{feet}")
      
After changing meters to 300, feet is still:656.0
print("we need to recalculate feet!")
      
we need to recalculate feet!
print("\n3.String operations:")
      

3.String operations:
print("-" * 40)
      
----------------------------------------
greeting = "Hello"
      
name = "Python"
      
message = greeting+ " " + name + "!"
      
print(message)
      
Hello Python!
separator = "-" * 20
      
print(separator)
      
--------------------
print("Line 1\nLine2\tTabbed")
      
Line 1
Line2	Tabbed
print("He said \ "Hello World!\"")
      
SyntaxError: invalid syntax. Perhaps you forgot a comma?
print( "He said \"Hello World
       
SyntaxError: unterminated string literal (detected at line 1); perhaps you escaped the end quote?
print("He said \"Hello World!\ " ")
      
SyntaxError: unterminated string literal (detected at line 1)
print('She siad \ 'Pyhon is great!\' ')
      
SyntaxError: invalid syntax. Perhaps you forgot a comma?
SyntaxError: invalid syntax. Perhaps you forgot a comma?
      
SyntaxError: invalid syntax
print(multi_line)
      
Traceback (most recent call last):
  File "<pyshell#104>", line 1, in <module>
    print(multi_line)
NameError: name 'multi_line' is not defined
multi-line  = """This is a
SyntaxError: unterminated triple-quoted string literal (detected at line 1)
multi-line  = """This is a multi-line stringthat spans several lines."""
SyntaxError: cannot assign to expression here. Maybe you meant '==' instead of '='?
print(multi_line)
Traceback (most recent call last):
  File "<pyshell#107>", line 1, in <module>
    print(multi_line)
NameError: name 'multi_line' is not defined
print("_" * 40)
________________________________________
x = 10
y = 20
print(f"Before swap: x= {x}, y = {y}")
Before swap: x= 10, y = 20
temp = x
x = y
y = temp
print(f"After swap (method 1): x ={x}, y = {y}")
After swap (method 1): x =20, y = 10
x, y = y,x
print(f"After swap (method 1) : x = {x}, y = {y}")
After swap (method 1) : x = 10, y = 20
print9"\n" = "="*50)
SyntaxError: unmatched ')'
print9"\n" = "="*50)
print9"\n" = "="*50)
print("\n" = "="*50)
SyntaxError: unmatched ')'
print("\n" + "="*50)

==================================================
print("QUICK ACCESS")
QUICK ACCESS
print("="*50)
==================================================
print("\n1.Type Identification:")

1.Type Identification:
print("-" * 40)
----------------------------------------
>>> objects = [1234,8.99,9.0, True, False, "hello",None]
>>> for obj in objects:
...      print(f"{obj} ->{type(obj).__name__}")
...      print("\n2. Boolean Logic:")
...      print("-" * 40)
...      test_values = [0,1,-1, "", "hello",[],[1,2],{},{"key : "value"}]
...      
SyntaxError: unterminated string literal (detected at line 5)
>>> for value in test_va;ues:
SyntaxError: invalid syntax
>>> for value in test_va;ues:
... for value in test_values:
SyntaxError: invalid syntax
>>> test_values = [0, 1, -1, "", "hello", [], [1, 2], {}, {"key": "value"}]
... for value in test_values:
...     print(f"bool({value}) = {bool(value)}")
... 
... print("\n3. Operator Precedence:")
... print("-" * 40)
... 
... 
... expressions = [
...     "2 + 3 * 4",
...     "(2 + 3) * 4", 
...     "2 ** 3 ** 2",for expr in expressions:
...     result = eval(expr)
...     print(f"{expr} = {result}")
... 
...     "(2 ** 3) ** 2",
...     "10 / 3 * 3",
...     "10 // 3 * 3"
... ]
SyntaxError: multiple statements found while compiling a single statement
>>> for expr in expressions:
...     result = eval(expr)
...     print(f"{expr} = {result}
... 
... print("\n" + "="*50)
... print("LAB PROBLEMS")
... print("="*50)
... print("\n1. Temperature Converter:")
... print("-" * 40)
... 
... def celsius_to_fahrenheit(celsius):
...     """Convert Celsius to Fahrenheit."""
...     return (celsius * 9/5) + 32
... 
def fahrenheit_to_celsius(fahrenheit):
    """Convert Fahrenheit to Celsius."""
    return (fahrenheit - 32) * 5/9


c_temp = 25
f_temp = celsius_to_fahrenheit(c_temp)
print(f"{c_temp}°C = {f_temp}°F")

f_temp = 77
c_temp = fahrenheit_to_celsius(f_temp)
print(f"{f_temp}°F = {c_temp}°C")
print("\n2. Simple Calculator:")
print("-" * 40)

def simple_calculator():
    """A simple calculator with basic operations."""
    print("Simple Calculator")
    print("Operations: +, -, *, /, **")
    

    num1 = 10
    num2 = 3
    operation = "+"
    
    if operation == "+":
        result = num1 + num2
    elif operation == "-":
        result = num1 - num2
    elif operation == "*":
        result = num1 * num2
    elif operation == "/":
        result = num1 / num2
    elif operation == "**":
        result = num1 ** num2
    else:
        result = "Invalid operation"
    
    print(f"{num1} {operation} {num2} = {result}")

simple_calculator()

print("\n3. Grade Calculator:")
print("-" * 40)

def calculate_weighted_average():
    """Calculate weighted average of grades."""
    grades = [85, 92, 78, 96]
    weights = [0.25, 0.25, 0.25, 0.25]  
    
    weighted_sum = sum(grade * weight for grade, weight in zip(grades, weights))
    print(f"Grades: {grades}")
    print(f"Weights: {weights}")
    print(f"Weighted Average: {weighted_sum:.2f}")

calculate_weighted_average()
print("\n4. Password Validator:")
print("-" * 40)

def validate_password(password):
    """Check if password meets basic criteria."""
    criteria = {
        "length": len(password) >= 8,
        "has_uppercase": any(c.isupper() for c in password),
        "has_lowercase": any(c.islower() for c in password),
        "has_digit": any(c.isdigit() for c in password),
        "has_special": any(c in "!@#$%^&*()_+-=[]{}|;:,.<>?" for c in password)
    }
    
    print(f"Password: {password}")
    for criterion, passed in criteria.items():
        status = "✓" if passed else "✗"
        print(f"  {criterion}: {status}")
    
    return all(criteria.values())
test_passwords = ["password", "Password123", "Password123!", "P@ssw0rd"]
for pwd in test_passwords:
    is_valid = validate_password(pwd)
    print(f"Overall: {'Valid' if is_valid else 'Invalid'}\n"

print("\n" + "="*50)
print("ASSESSMENT CRITERIA")
print("="*50)

print("""
For all exercises and labs, your code will be evaluated on:

1. CODE QUALITY:
   - PEP 8 compliance (indentation, spacing, naming)
   - Meaningful variable and function names
   - Clear and concise code structure

2. FUNCTIONALITY:
   - Correct implementation of requirements
   - Handles edge cases appropriately
   - Produces expected outputs

3. ERROR HANDLING:
   - Graceful handling of invalid inputs
   - Appropriate use of try-except blocks
   - Clear error messages

4. DOCUMENTATION:
   - Clear comments explaining complex logic
   - Docstrings for functions
   - Inline comments where helpful

5. TESTING:
   - Verification with multiple test cases
   - Edge case testing
   - Expected vs. actual output verification
""")

print("\n" + "="*50)
print("MODULE 1 COMPLETE!")
print("Next: Module 2 - Advanced Data Structures & Control Flow")

