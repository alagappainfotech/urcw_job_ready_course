                              1_PRIMITIVE_DATATYPES_AND_OPERATORS_ANSWERS
print("Welcome to Python! Let's explore the fundamentals.")
print("=" * 50)
3  
1 + 1   
8 - 1   
10 * 2  
35/3 
5 // 3      
-5 // 3     
5.0 // 3.0   
-5.0 // 3.0  
10.0 / 3 
7 % 3   
-7 % 3  
2**3 
1 + 3 * 2    
(1 + 3) * 2
True  
False
not True 
not False  
True and False  
False or True   
True + True 
True * 8    
False - 5    
0 == False  
2 > True   
2 == True    
-5 != False  
bool(0)    
bool("")     
bool([])     
bool({})     
bool(())     
bool(set())  
bool(4)    
bool(-6)   
bool(0)   
bool(2)   
0 and 2   
bool(-5)  
bool(2)   
-5 or 0   
1 == 1
2 == 1  
1 != 1  
2 != 1  
1 < 10  
1 > 10  
2 <= 2
2 >= 2  
1 < 2 and 2 < 3  
2 < 3 and 3 < 2  
1 < 2 < 3  
2 < 3 < 2  
a = [1, 2, 3, 4]  
b = a           
b is a            
b == a            
b = [1, 2, 3, 4]  
b is a            
b == a            
"This is a string."
'This is also a string.'
"Hello " + "world!"  
"Hello " "world!"    
"Hello world!"[0]  
len("This is a string")  
name = "Reiko"
f"She said her name is {name}."  
f"{name} is {len(name)} characters long."
None  
"etc" == None  
None == None   
 =============================================================================
 TRY THIS EXERCISES - Hands-on Application
 =============================================================================
print("\n" + "="*50)
print("TRY THIS EXERCISES")
print("="*50)
print("\n1. Getting Input and Type Conversion:")
print("-" * 40)
print("\n2. Variable Manipulation:")
print("-" * 40)
pi = 3.14159
radius = 2.2
area = pi * radius ** 2
print(f"Circle with radius {radius} has area: {area}")
meters = 200
feet = meters * 3.28
print(f"{meters} meters = {feet} feet")
meters = 300
print(f"After changing meters to {meters}, feet is still: {feet}")
print("We need to recalculate feet!")
print("\n3. String Operations:")
print("-" * 40)
greeting = "Hello"
name = "Python"
message = greeting + " " + name + "!"
print(message)
separator = "-" * 20
print(separator)
print("Line 1\nLine 2\tTabbed")
print("He said \"Hello World!\"")
print('She said \'Python is great!\'')
multi_line = """This is a
multi-line string
that spans several lines."""
print(multi_line)
print("\n4. Value Swapping:")
print("-" * 40)
x = 10
y = 20
print(f"Before swap: x = {x}, y = {y}"
temp = x
x = y
y = temp
print(f"After swap (method 1): x = {x}, y = {y}"
x, y = y, x
print(f"After swap (method 2): x = {x}, y = {y}")
=============================================================================
QUICK CHECKS - Immediate Reinforcement
=============================================================================
print("\n" + "="*50)
print("QUICK CHECKS")
print("="*50)
print("\n1. Type Identification:")
print("-" * 40)
objects = [1234, 8.99, 9.0, True, False, "hello", None]
for obj in objects:
    print(f"{obj} -> {type(obj).__name__}")
print("\n2. Boolean Logic:")
print("-" * 40)
test_values = [0, 1, -1, "", "hello", [], [1, 2], {}, {"key": "value"}]
for value in test_values:
    print(f"bool({value}) = {bool(value)}")
print("\n3. Operator Precedence:")
print("-" * 40)
expressions = [
    "2 + 3 * 4",
    "(2 + 3) * 4", 
    "2 ** 3 ** 2",
    "(2 ** 3) ** 2",
    "10 / 3 * 3",
    "10 // 3 * 3"
]
for expr in expressions:
    result = eval(expr)
    print(f"{expr} = {result}")

=============================================================================
LAB PROBLEMS - Critical Thinking
=============================================================================

print("\n" + "="*50)
print("LAB PROBLEMS")
print("="*50)
print("\n1. Temperature Converter:")
print("-" * 40)
def celsius_to_fahrenheit(celsius):
    """Convert Celsius to Fahrenheit."""
    return (celsius * 9/5) + 32
def fahrenheit_to_celsius(fahrenheit):
    """Convert Fahrenheit to Celsius."""
    return (fahrenheit - 32) * 5/9
c_temp = 25
f_temp = celsius_to_fahrenheit(c_temp)
print(f"{c_temp}°C = {f_temp}°F")
f_temp = 77
c_temp = fahrenheit_to_celsius(f_temp)
print(f"{f_temp}°F = {c_temp}°C")
print("\n2. Simple Calculator:")
print("-" * 40)
def simple_calculator():
    """A simple calculator with basic operations."""
    print("Simple Calculator")
    print("Operations: +, -, *, /, **")
    num1 = 10
    num2 = 3
    operation = "+"
     if operation == "+":
        result = num1 + num2
    elif operation == "-":
        result = num1 - num2
    elif operation == "*":
        result = num1 * num2
    elif operation == "/":
        result = num1 / num2
    elif operation == "**":
        result = num1 ** num2
    else:
        result = "Invalid operation"
    print(f"{num1} {operation} {num2} = {result}")
simple_calculator()
print("\n3. Grade Calculator:")
print("-" * 40)
def calculate_weighted_average():
    """Calculate weighted average of grades."""
    grades = [85, 92, 78, 96]
    weights = [0.25, 0.25, 0.25, 0.25]  # Equal weights
    weighted_sum = sum(grade * weight for grade, weight in zip(grades, weights))
    print(f"Grades: {grades}")
    print(f"Weights: {weights}")
    print(f"Weighted Average: {weighted_sum:.2f}")
calculate_weighted_average()
print("\n4. Password Validator:")
print("-" * 40)
def validate_password(password):
    """Check if password meets basic criteria."""
    criteria = {
        "length": len(password) >= 8,
        "has_uppercase": any(c.isupper() for c in password),
        "has_lowercase": any(c.islower() for c in password),
        "has_digit": any(c.isdigit() for c in password),
        "has_special": any(c in "!@#$%^&*()_+-=[]{}|;:,.<>?" for c in password)
 }
     print(f"Password: {password}")
    for criterion, passed in criteria.items():
        status = "✓" if passed else "✗"
        print(f"  {criterion}: {status}")
     return all(criteria.values())
test_passwords = ["password", "Password123", "Password123!", "P@ssw0rd"]
for pwd in test_passwords:
    is_valid = validate_password(pwd)
    print(f"Overall: {'Valid' if is_valid else 'Invalid'}\n")
 =============================================================================
 ASSESSMENT CRITERIA
=============================================================================
print("\n" + "="*50)
print("ASSESSMENT CRITERIA")
print("="*50)
print("""
For all exercises and labs, your code will be evaluated on:
1. CODE QUALITY:
   - PEP 8 compliance (indentation, spacing, naming)
   - Meaningful variable and function names
   - Clear and concise code structure

2. FUNCTIONALITY:
   - Correct implementation of requirements
   - Handles edge cases appropriately
   - Produces expected outputs

3. ERROR HANDLING:
   - Graceful handling of invalid inputs
   - Appropriate use of try-except blocks
   - Clear error messages

4. DOCUMENTATION:
   - Clear comments explaining complex logic
   - Docstrings for functions
   - Inline comments where helpful

5. TESTING:
   - Verification with multiple test cases
   - Edge case testing
   - Expected vs. actual output verification
""")
print("\n" + "="*50)
print("MODULE 1 COMPLETE!")
print("Next: Module 2 - Advanced Data Structures & Control Flow")
print("="*50)
Welcome to Python! Let's explore the fundamentals.
==================================================

==================================================
TRY THIS EXERCISES
==================================================

1. Getting Input and Type Conversion:
----------------------------------------
>>> 3
3
>>> 1+1
2
>>>7-1
6
>>> 10*4
40
>>> 35/5
7.0
>>> 5//3
1
>>> -5//3
-2
>>> 5.0//3.0
1.0
>>> -5.0//3.0
-2.0
>>> 10.0/3
3.3333333333333335
>>> 7%3
1
>>> -7%3
2
>>> 2**3
8
>>> 1+3*2
7
>>> (1+3)*2
8
>>> True
True
>>> False
False
>>> not True
False
>>> not False
True
>>> True and False
False
>>> False or True
True
>>> True+True
2
>>> True*8
8
>>> False-5
-5
>>> 0==False
True
>>> 2>True
True
>>> 2==True
False
>>> -5!=False
True
>>> bool(0)
False
>>> bool(2)
True
>>> 0 and 2
0
>>> bool(-5)
True
>>> bool(2)
True
>>> -5 or 0
-5
>>> 1==1
True
>>> 2==1
False
>>> 1!=1
False
>>> 2!=1
True
>>> 1<10
True
>>> 1>10
False
>>> 1<2 and 2<3
True
>>> 2<3 and 3<2
False
>>> 1<2<3
True
>>> 2<3<2
False
>>> a=[1,2,3,4]
>>> b=a
>>> b is a
True
>>> b==a
True
>>> b=[1,2,3,4]
>>> b is a
False
>>> b==a
True
>>> 4<=4
True
>>> 4>=4
True
>>> "This is a string."
'This is a string.'
>>> 'This is also a string.'
'This is also a string.'
>>> "Hi "+"World!"
'Hi World!'
>>> "Hi " "World!"
'Hi World!'
>>> "Hi World"[0]
'H'
>>> len("Calculate length")
16
>>> name="mahi"
>>> f"She said her name is {name}."
'She said her name is mahi.'
>>> f"{name} is {len(name)} characters long."
'mahi is 4 characters long.'
>>> "etc" ==None
False
>>> None is None
True

2. Variable Manipulation:
----------------------------------------
Circle with radius 2.2 has area: 15.205295600000001
200 meters = 656.0 feet
After changing meters to 300, feet is still: 656.0
We need to recalculate feet!

3. String Operations:
----------------------------------------
Hello Python!
--------------------
Line 1
Line 2  Tabbed
He said "Hello World!"
She said 'Python is great!'
This is a
multi-line string
that spans several lines.

4. Value Swapping:
----------------------------------------
Before swap: x = 10, y = 20
After swap (method 1): x = 20, y = 10
After swap (method 2): x = 10, y = 20

==================================================
QUICK CHECKS
==================================================

1. Type Identification:
----------------------------------------
1234 -> int
8.99 -> float
9.0 -> float
True -> bool
False -> bool
hello -> str
None -> NoneType

2. Boolean Logic:
----------------------------------------
bool(0) = False
bool(1) = True
bool(-1) = True
bool() = False
bool(hello) = True
bool([]) = False
bool([1, 2]) = True
bool({}) = False
bool({'key': 'value'}) = True

3. Operator Precedence:
----------------------------------------
2 + 3 * 4 = 14
(2 + 3) * 4 = 20
2 ** 3 ** 2 = 512
(2 ** 3) ** 2 = 64
10 / 3 * 3 = 10.0
10 // 3 * 3 = 9

==================================================
LAB PROBLEMS
==================================================

1. Temperature Converter:
----------------------------------------
25°C = 77.0°F
77°F = 25.0°C

2. Simple Calculator:
----------------------------------------
Simple Calculator
Operations: +, -, *, /, **
10 + 3 = 13

3. Grade Calculator:
----------------------------------------
Grades: [85, 92, 78, 96]
Weights: [0.25, 0.25, 0.25, 0.25]
Weighted Average: 87.75

4. Password Validator:
----------------------------------------
Password: password
  length: ✓
  has_uppercase: ✗
  has_lowercase: ✓
  has_digit: ✗
  has_special: ✗
Overall: Invalid

Password: Password123
  length: ✓
  has_uppercase: ✓
  has_lowercase: ✓
  has_digit: ✓
  has_special: ✗
Overall: Invalid

Password: Password123!
  length: ✓
  has_uppercase: ✓
  has_lowercase: ✓
  has_digit: ✓
  has_special: ✓
Overall: Valid

Password: P@ssw0rd
  length: ✓
  has_uppercase: ✓
  has_lowercase: ✓
  has_digit: ✓
  has_special: ✓
Overall: Valid


==================================================
ASSESSMENT CRITERIA
==================================================

For all exercises and labs, your code will be evaluated on:

1. CODE QUALITY:
   - PEP 8 compliance (indentation, spacing, naming)
   - Meaningful variable and function names
   - Clear and concise code structure

2. FUNCTIONALITY:
   - Correct implementation of requirements
   - Handles edge cases appropriately
   - Produces expected outputs

3. ERROR HANDLING:
   - Graceful handling of invalid inputs
   - Appropriate use of try-except blocks
   - Clear error messages

4. DOCUMENTATION:
   - Clear comments explaining complex logic
   - Docstrings for functions
   - Inline comments where helpful

5. TESTING:
   - Verification with multiple test cases
   - Edge case testing
   - Expected vs. actual output verification


==================================================
MODULE 1 COMPLETE!
Next: Module 2 - Advanced Data Structures & Control Flow
==================================================
>>>